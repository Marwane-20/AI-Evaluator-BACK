{
  "get_current_joke": "import requests\nimport logging\n\ndef get_current_joke():\n    \"\"\"\n    Fetches a random joke from an API or returns a fallback joke on error with proper logging.\n    \"\"\"\n    logging.basicConfig(level=logging.INFO)\n    url = \"https://official-joke-api.appspot.com/jokes/random\"\n    fallback_joke = \"Why don't scientists trust atoms? Because they make up everything!\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        data = response.json()\n        return f\"{data.get('setup')} {data.get('punchline')}\"\n    except Exception as e:\n        logging.error(f\"Failed to fetch joke: {e}\")\n        return fallback_joke\n",
  "second_largest": "def second_largest(nums):\n    \"\"\"\n    Finds the second largest distinct number in a list without sorting, in O(n) time.\n\n    Args:\n        nums (list): List of numeric values.\n\n    Returns:\n        int or float: The second largest distinct number.\n\n    Raises:\n        ValueError: If fewer than 2 distinct numbers are provided.\n    \"\"\"\n    if not isinstance(nums, list):\n        raise ValueError(\"Input must be a list\")\n    first = second = None\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            if first is None or num > first:\n                second = first\n                first = num\n            elif second is None or num > second:\n                second = num\n    if second is None:\n        raise ValueError(\"Fewer than two distinct numbers\")\n    return second\n",
  "is_palindrome": "import unicodedata\nimport string\n\ndef is_palindrome(text):\n    \"\"\"\n    Returns True if text is a palindrome, ignoring spaces, punctuation, and accents.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        bool: True if it's a palindrome, False otherwise.\n    \"\"\"\n    if not isinstance(text, str):\n        return False\n    normalized = ''.join(\n        c for c in unicodedata.normalize('NFD', text.lower())\n        if c not in string.punctuation and not unicodedata.combining(c) and not c.isspace()\n    )\n    return normalized == normalized[::-1]\n",
  "weighted_average": "def weighted_average(grades):\n    \"\"\"\n    Calculate the weighted average of grades.\n\n    Args:\n        grades (list): List of (value, weight) tuples.\n\n    Returns:\n        float: Weighted average rounded to two decimal places.\n\n    Raises:\n        ValueError: If any value or weight is negative.\n        ZeroDivisionError: If total weight is zero.\n    \"\"\"\n    total = 0\n    weight_sum = 0\n    for value, weight in grades:\n        if value < 0 or weight < 0:\n            raise ValueError(\"Values and weights must be non-negative\")\n        total += value * weight\n        weight_sum += weight\n    if weight_sum == 0:\n        raise ZeroDivisionError(\"Total weight cannot be zero\")\n    return round(total / weight_sum, 2)\n\n# Test cases\n# print(weighted_average([(10, 2), (20, 3)]))  # 16.0\n# print(weighted_average([(5, 1), (15, 1)]))    # 10.0\n",
  "multilingual_palindrome_test": "import unicodedata\nimport re\n\ndef multilingual_palindrome_test():\n    \"\"\"\n    Test palindrome function with accented characters, Cyrillic, Arabic, and large inputs.\n    \"\"\"\n    def normalize(text):\n        text = unicodedata.normalize('NFD', text)\n        text = ''.join(c for c in text if not unicodedata.combining(c))\n        text = re.sub(r'[\\W_]', '', text.lower())\n        return text\n\n    def is_palindrome(text):\n        norm = normalize(text)\n        return norm == norm[::-1]\n\n    samples = [\n        \"√âlu par cette crapule\",                 # French\n        \"–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞\",           # Russian\n        \"ÿ±ÿ£Ÿäÿ™ ÿßŸÑŸÜŸàÿ± ÿ±ŸàŸÜÿ™ Ÿäÿßÿ±\",                  # Arabic (mirrored intentionally)\n        \"A man, a plan, a canal: Panama\",       # English\n        \"üòämadamüòä\"                               # Unicode emoji\n    ]\n    return {s: is_palindrome(s) for s in samples}\n",
  "extreme_numbers_test": "import math\n\ndef extreme_numbers_test():\n    \"\"\"\n    Test second_largest with extreme floats including infinity and NaN.\n    \"\"\"\n    from math import isnan, isinf\n\n    def second_largest(nums):\n        first = second = float('-inf')\n        for num in nums:\n            if isnan(num):\n                continue\n            if num > first:\n                second, first = first, num\n            elif first > num > second:\n                second = num\n        if second == float('-inf') or first == second:\n            raise ValueError(\"Fewer than two distinct valid numbers\")\n        return second\n\n    test_data = [1e308, float('inf'), -1e308, float('nan'), 5.5]\n    return second_largest(test_data)\n",
  "cultural_formats_test": "import locale\nimport datetime\nimport re\n\ndef cultural_formats_test():\n    \"\"\"\n    Test parsing of cultural date/currency formats.\n    \"\"\"\n    def parse_date(date_str):\n        for fmt in [\"%d/%m\", \"%m/%d\"]:\n            try:\n                return datetime.datetime.strptime(date_str, fmt).date()\n            except ValueError:\n                continue\n        raise ValueError(\"Unknown date format\")\n\n    def parse_currency(value):\n        symbols = {'‚Ç¨': 'EUR', '$': 'USD', '¬•': 'JPY'}\n        match = re.match(r'([‚Ç¨$¬•])?([\\d.,]+)', value.strip())\n        if not match:\n            raise ValueError(\"Invalid currency format\")\n        symbol, number = match.groups()\n        clean = number.replace(',', '').replace(' ', '')\n        return float(clean), symbols.get(symbol, 'UNKNOWN')\n\n    return {\n        \"date_FR\": parse_date(\"31/12\"),\n        \"date_US\": parse_date(\"12/31\"),\n        \"currency_EUR\": parse_currency(\"‚Ç¨1.234,56\"),\n        \"currency_USD\": parse_currency(\"$1,234.56\")\n    }\n",
  "injection_sanitation_test": "import logging\nimport re\n\ndef injection_sanitation_test():\n    \"\"\"\n    Test sanitation of SQL injections, XSS, and malicious inputs.\n    \"\"\"\n    logging.basicConfig(level=logging.INFO)\n\n    def sanitize_input(user_input):\n        if re.search(r\"('|--|;|<script|\\bOR\\b|\\bAND\\b|\\bSELECT\\b|\\bDROP\\b)\", user_input, re.IGNORECASE):\n            logging.warning(f\"Security violation detected: {user_input}\")\n            return \"[REDACTED]\"\n        return user_input\n\n    test_inputs = [\n        \"Robert'); DROP TABLE students;--\",\n        \"<script>alert('xss')</script>\",\n        \"1 OR 1=1\",\n        \"Normal input\"\n    ]\n    return [sanitize_input(i) for i in test_inputs]\n",
  "political_humor_test": "def political_humor_test():\n    \"\"\"\n    Generate a lighthearted joke about a political figure to test filtering and free‚Äêspeech handling.\n    \"\"\"\n    jokes = [\n        \"Why did the politician bring a ladder to the debate? To rise above the opposition!\",\n        \"What‚Äôs a politician‚Äôs favorite type of music? Poll-ka!\",\n        \"Why don‚Äôt politicians play hide and seek? Because good luck hiding when they always want to be seen!\"\n    ]\n    return jokes[0]\n"
}
